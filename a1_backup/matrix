#!/bin/bash
#------------------------------------#
# File Name: matrix
# Author: Zongzhe Bi
# Date: 9/30/2018
# Description: Assignment 1 for CS344
#------------------------------------#

matrix1="tempMatrix$$"
#Function: num_input
#Description: check the the number of input variables.
#             Throw an error if the number is not expected
num_input(){
   if [[ $1 -ne $2 ]]
   then
      echo "Invalid Enter: number is wrong" 1>&2
      exit 1
   fi
}


is_readable(){
   if [[ ! -r $1 ]]
   then
      echo "Invalid" 1>&2
      exit 1
   fi
}


#Function: Dims
#Description: give the dimensions of the given matrix
dims(){
   rowNum=0
   while read lines
   do
      ((rowNum++))
      colNum=0
      for num in $lines
      do
         ((colNum++))
      done
   done < $1
   echo "$rowNum $colNum"
   rm -f dim*
   return 0
}


#Function: transpose
#Description: transpose of the given matrix
transpose(){
   m1=$1
   dims $m1 >/dev/null
   rowNum="$rowNum"
   cnt=1
   temp_cols="temp_cols$$"
   trans="trans$$"
   read -e lines < $1
   for num in $lines
   do
   	cut -f $cnt $1 > $temp_cols
   	((cnt++))
   	row=$(cat $temp_cols | tr '\n' '\t')
   	# echo "$row" >> $trans
      i_cnt=1
      for i in $row
   	do
   		if [[ $i_cnt == $rowNum ]]; then
            echo -e "$i" >> $trans
            i_cnt=0

         else
            echo -n -e "$i\t" >> $trans
            ((i_cnt++))
         fi
   	done

   done
   if [ -f $trans ]; then
      sed -i 's/[ \t]*$//g' $trans
   fi
   cat "$trans"
   rm -f temp* trans*
   return 0
}


#Function: mean
#Description: give the mean of each column of the matirx
mean(){
   m1=$1
   dims $m1 >/dev/null
   colNum="$colNum"
   rowNum="$rowNum"
   temp_cols="temp_cols$$"
   mean="mean$$"

   cnt=1
   read -e lines < $1
   for num in $lines
   do
   	cut -f $cnt $1 > $temp_cols
   	((cnt++))
   	row=$(cat $temp_cols | tr '\n' '\t')
   	sum=0
      for i in $row
   	do
   		sum=`expr $sum + $i`
   	done
   	final=$(echo "scale=1; $sum/$rowNum" | bc)
   	sum=$(printf "%.0f\n" $final)
   	if [[ $cnt == $((colNum+1)) ]]; then
   		echo -e "$sum" >> $mean
   	else
   		echo -n -e "$sum\t" >> $mean
   	fi
   	sum=0
   done
   cat "$mean"
   rm -f temp* mean*
   return 0
}


#Function: add
#Description: add two given matrix
add(){
   m1=$1
   m2=$2
   dims $m1 >/dev/null
   m1_rowNum="$rowNum"
   m1_colNum="$colNum"
   dims $m2 >/dev/null
   m2_rowNum="$rowNum"
   m2_colNum="$colNum"
   add_file="add_file$$"
   if [[ ($m1_rowNum -eq $m2_rowNum) && ($m1_colNum -eq $m2_colNum)]]
   then
   	for row in `seq 1 $m1_rowNum`
   	do
   		for col in `seq 1 $m1_colNum`
   		do
   			num_1=$(cat $m1 | cut -f $col | head -n $row | tail -n 1)
   			num_2=$(cat $m2 | cut -f $col | head -n $row | tail -n 1)
   			sum=`expr $num_1 + $num_2`

            if [[ $col == $m1_colNum ]]; then
      			echo -e "$sum" >> "$add_file"
      		else
      			echo -n -e "$sum\t" >> "$add_file"
      		fi
   		done
   	done
   	cat "$add_file"
   else
   	echo "Error: Dimension does not match" 1>&2
   	exit 1
   fi
   rm -f add*
   return 0
}


#Function: mult
#Description: multiply two matrix
multiply(){
   m1=$1
   m2=$2
   dims $m1 >/dev/null
   m1_colNum="$colNum"
   m1_rowNum="$rowNum"
   dims $m2 >/dev/null
   m2_rowNum="$rowNum"
   m2_colNum="$colNum"
   mult_file="mult_file$$"
   if [[ $m1_colNum -ne $m2_rowNum ]]; then
      echo "matirx does not match" 1>&2
      exit 1
   else
      for row in `seq 1 $m1_rowNum`
      do
         for and in `seq 1 $m2_colNum`
         do
            sum=0
            for col in `seq 1 $m1_colNum`
            do
               num_1=$(cat $m1 | cut -f $col | head -n $row | tail -n 1)
               num_2=$(cat $m2 | cut -f $and | head -n $col | tail -n 1)
               mult=`expr $num_1 \* $num_2`
               sum=`expr $sum + $mult`
            done
            if [[ $and == $m2_colNum ]]; then
      			echo -e "$sum" >> "$mult_file"
      		else
      			echo -n -e "$sum\t" >>"$mult_file"
      		fi
         done
      done
      cat "$mult_file"
      rm -f mult*
   fi
   return 0
}


#Function: control part
#Description: Response according to different inputs of users
if [ $# -eq 0 ]; then
   echo "Invalid Enter" 1>&2
   exit 1
fi

if [[ $1 == 'dims' ]]
then
   num_input 2 $#
   is_readable $2
   $1 "${@:2}"
elif [[ $1 == 'transpose' ]]
then
   num_input 2 $#
   is_readable $2
   $1 "${@:2}"
elif [[ $1 == 'mean' ]]
then
   num_input 2 $#
   is_readable $2
   $1 "${@:2}"
elif [[ $1 == 'add' ]]
then
   num_input 3 $#
   is_readable $2
   is_readable $3
   $1 "${@:2}"
elif [[ $1 == 'multiply' ]]
then
   num_input 3 $#
   is_readable $2
   is_readable $3
   $1 "${@:2}"
else
   echo "Invalid Enter" 1>&2
   exit 1
fi
